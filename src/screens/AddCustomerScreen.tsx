import React, { useState } from 'react';
import { User, Save, Phone } from 'lucide-react';
import { Header } from '../components/Layout/Header';
import { Card } from '../components/UI/Card';
import { Input } from '../components/UI/Input';
import { Button } from '../components/UI/Button';
import { Customer } from '../types';

interface AddCustomerScreenProps {
Â  onBack: () => void;
Â  onAddCustomer: (customer: Omit<Customer, 'id' | 'createdAt'>) => Customer;
Â  // AlteraÃ§Ã£o na interface: onSuccess agora aceita o novo cliente (Customer)
Â  onSuccess?: (newCustomer: Customer) => void;Â 
Â  fromInstallmentSale?: boolean;
}

export const AddCustomerScreen: React.FC<AddCustomerScreenProps> = ({
Â  onBack,
Â  onAddCustomer,
Â  onSuccess,
Â  fromInstallmentSale = false
}) => {
Â  const [name, setName] = useState('');
Â  const [phone, setPhone] = useState('');
Â  // NOVO: Estado para gerenciar o Toast
Â  const [toastMessage, setToastMessage] = useState('');
Â  const [showToast, setShowToast] = useState(false);

Â  // NOVO: FunÃ§Ã£o para exibir o Toast/Snackbar na parte superior da tela
Â  const displayToast = (message: string) => {
Â  Â  setToastMessage(message);
Â  Â  setShowToast(true);
Â  Â  setTimeout(() => {
Â  Â  Â  setShowToast(false);
Â  Â  Â  setToastMessage('');
Â  Â  }, 3000); // Esconde apÃ³s 3 segundos
Â  };

Â  const handleSubmit = (e: React.FormEvent) => {
Â  Â  e.preventDefault();
Â  Â Â 
Â  Â  if (!name.trim()) {
Â  Â  Â  // CORRIGIDO: Substituindo alert() por displayToast()
Â  Â  Â  displayToast('Nome do cliente Ã© obrigatÃ³rio!');
Â  Â  Â  return;
Â  Â  }

Â  Â  // O bloco de validaÃ§Ã£o do telefone foi removido aqui (conforme sua primeira solicitaÃ§Ã£o)

Â  Â  const customer = onAddCustomer({
Â  Â  Â  name: name.trim(),
Â  Â  Â  phone: phone.trim()
Â  Â  });

Â  Â  if (fromInstallmentSale) {
Â  Â  Â  // CORRIGIDO: Substituindo alert() por displayToast()
Â  Â  Â  displayToast("âœ… Cliente cadastrado com sucesso! Retornando para a venda...");
Â  Â  } else {
Â  Â  Â  // CORRIGIDO: Substituindo alert() por displayToast()
Â  Â  Â  displayToast(`âœ… Cliente cadastrado com sucesso!`);
Â  Â  }
Â  Â Â 
Â  Â  // CORREÃ‡ÃƒO ESSENCIAL: Adiciona um atraso de 1 segundo antes de navegar,
Â  Â  // permitindo que o Toast seja exibido ao usuÃ¡rio.
Â  Â  setTimeout(() => {
Â  Â  Â  // AlteraÃ§Ã£o na lÃ³gica: Se onSuccess existe, chamamos ele passando o objeto 'customer'.
Â  Â  Â  if (onSuccess) {
Â  Â  Â  Â  onSuccess(customer); // <-- CHAVE: Passa o cliente recÃ©m-criado
Â  Â  Â  } else {
Â  Â  Â  Â  onBack();
Â  Â  Â  }
Â  Â  }, 1000); // 1 segundo (1000ms) de atraso

Â  };

Â  // Ajuste de validaÃ§Ã£o para habilitar o botÃ£o apenas com o nome
Â  const isFormValid = name.trim();Â 

Â  return (
Â  Â  <div className="relative">
Â  Â  Â  {/* NOVO: Toast de mensagem simples na parte superior */}
Â  Â  Â  {showToast && (
Â  Â  Â  Â  <div className="fixed top-0 left-1/2 transform -translate-x-1/2 mt-4 z-50 p-3 bg-emerald-600 text-white font-medium rounded-lg shadow-xl transition-opacity duration-300">
Â  Â  Â  Â  Â  {toastMessage}
Â  Â  Â  Â  </div>
Â  Â  Â  )}

Â  Â  Â  <Header title="Adicionar Cliente" onBack={onBack} />
Â  Â  Â Â 
Â  Â  Â  <div className="p-4">
Â  Â  Â  Â  <Card>
Â  Â  Â  Â  Â  <div className="flex items-center gap-3 mb-6">
Â  Â  Â  Â  Â  Â  <User className="h-8 w-8 text-emerald-600" />
Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  <h2 className="text-xl font-bold text-gray-900">Novo Cliente</h2>
Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-600">Preencha os dados do cliente</p>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  <form onSubmit={handleSubmit} className="space-y-4">
Â  Â  Â  Â  Â  Â  <Input
Â  Â  Â  Â  Â  Â  Â  label="Nome do Cliente"
Â  Â  Â  Â  Â  Â  Â  placeholder="Digite o nome completo"
Â  Â  Â  Â  Â  Â  Â  value={name}
Â  Â  Â  Â  Â  Â  Â  onChange={setName}
Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  />

Â  Â  Â  Â  Â  Â  <Input
Â  Â  Â  Â  Â  Â  Â  label="NÃºmero de Telefone"
Â  Â  Â  Â  Â  Â  Â  placeholder="(11) 99999-9999"
Â  Â  Â  Â  Â  Â  Â  value={phone}
Â  Â  Â  Â  Â  Â  Â  onChange={setPhone}
Â  Â  Â  Â  Â  Â  Â  // required removido
Â  Â  Â  Â  Â  Â  />

Â  Â  Â  Â  Â  Â  <div className="grid grid-cols-2 gap-3 pt-4">
Â  Â  Â  Â  Â  Â  Â  <Button
Â  Â  Â  Â  Â  Â  Â  Â  variant="outline"
Â  Â  Â  Â  Â  Â  Â  Â  onClick={onBack}
Â  Â  Â  Â  Â  Â  Â  Â  fullWidth
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Cancelar
Â  Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  Â  Â  <Button
Â  Â  Â  Â  Â  Â  Â  Â  type="submit"
Â  Â  Â  Â  Â  Â  Â  Â  variant="primary"
Â  Â  Â  Â  Â  Â  Â  Â  icon={Save}
Â  Â  Â  Â  Â  Â  Â  Â  disabled={!isFormValid}
Â  Â  Â  Â  Â  Â  Â  Â  fullWidth
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Salvar
Â  Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </form>

Â  Â  Â  Â  Â  <div className="mt-6 p-4 bg-orange-50 rounded-lg border border-orange-200">
Â  Â  Â  Â  Â  Â  <p className="text-sm text-emerald-700">
Â  Â  Â  Â  Â  Â  Â  <strong>ðŸ’¡ Dica:</strong> O cliente ficarÃ¡ disponÃ­vel para vendas parceladas futuras.
Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </Card>
Â  Â  Â  </div>
Â  Â  </div>
Â  );
};